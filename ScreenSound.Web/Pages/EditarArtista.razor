@page "/EditarArtista/{NomeArtista}"
@using ScreenSound.Web.Requests
@inject ISnackbar Snackbar
@inject ArtistaAPI artistaAPI
@inject NavigationManager navigationManager


@if (Artista is not null)
{
    <MudPaper Class="px-8 pt-2 pb-4 mx-12 my-8" Justify="Justify.Center">

        <MudText Class="mt-8" Typo="Typo.h4">Edição de Artista</MudText>

        <MudForm>

            <MudTextField Class="mt-4" T="string" Placeholder="Nome do Artista"
            Variant="Variant.Outlined"
            @bind-Value="nome"
            Required="true"
            RequiredError="Campo obrigatório." />

            <MudTextField Class="mt-4" T="string" Placeholder="Biografia do artista"
            Variant="Variant.Outlined"
            @bind-Value="biografia"
            Lines="4"
            Required="true"
            RequiredError="Campo obrigatório." />      

            <div class="d-flex align-center justify-end mt-4">
                <MudButton Variant="Variant.Filled"
                @onclick="Voltar"
                Color="Color.Primary"
                Class="mr-2">
                    Voltar
                </MudButton>
                <MudButton Variant="Variant.Filled"
                @onclick="Deletar"
                Color="Color.Secondary">
                    Deletar
                </MudButton>
                <MudButton Variant="Variant.Filled"
                @onclick="Editar"
                Color="Color.Primary"
                Class="ml-auto">
                    Salvar
                </MudButton>
            </div>
        </MudForm>
    </MudPaper>
}
else
{
    <MudProgressCircular Indeterminate="true"></MudProgressCircular>
}
@code {
    bool success;

    string[] errors = { };

    MudForm? form;

    private string? nome;

    private string? biografia;

    private string? FotoPerfil;

    [Parameter]
    public string? NomeArtista { get; set; }

    public ArtistaResponse? Artista { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Artista = await artistaAPI.GetAristaPorNomeAsync(NomeArtista!);
        if (Artista is null)
        {
            Snackbar.Add("Artista consultado não encontrado.", Severity.Error);
            navigationManager.NavigateTo("/Artistas");
        }
        nome = Artista!.Nome;
        biografia = Artista!.Bio;
    }

    private async Task Deletar()
    {
        try
        {
        await artistaAPI.DeletarArtistaAsync(Artista!.Id);
        Snackbar.Add("Artista excluído com sucesso!", Severity.Success);
        navigationManager.NavigateTo("/Artistas");
        }
        catch (Exception)
        {
            // Logger.LogInformation("Erro ao cadastrar artista!");
        }
    }

    private async Task Voltar()
    {
        navigationManager.NavigateTo("/Artistas");
    }

    private async Task Editar()
    {
        try
        {
        var request = new ArtistaRequestEdit(Artista!.Id, nome!, biografia!, FotoPerfil);
        await artistaAPI.UpdateArtistaAsync(request);
        Snackbar.Add("Artista atualizado com sucesso!", Severity.Success);
        navigationManager.NavigateTo("/Artistas");
        }
        catch (Exception)
        {
            // Logger.LogInformation("Erro ao cadastrar artista!");
        }
    }
}
